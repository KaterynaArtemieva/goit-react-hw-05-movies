{"version":3,"file":"static/js/150.073e4f42.chunk.js","mappings":"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","sources":["fetchAPI/fetchAPI.js","hooks/useFetchMovieInfo.js","components/Movie/Movie.styled.js","components/Movie/Movie.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = 'd3bfd9e3078e7fbc5691e64e118089ee';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios('trending/movie/week', {\n    params: { api_key: KEY },\n  });\n  return data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    url: poster_path,\n  }));\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const { data } = await axios('search/movie', {\n    params: { api_key: KEY, query },\n  });\n  return data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    url: poster_path,\n  }));\n};\n\nexport const fetchMovieById = async (movieId, endpoint) => {\n  const response = await axios(`movie/${movieId}${endpoint}`, {\n    params: { api_key: KEY },\n  });\n\n  return response.data;\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieById } from 'fetchAPI/fetchAPI';\n\nexport default function useFetchMovieInfo(endpoint = '') {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovie = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieDetails = await fetchMovieById(movieId, endpoint);\n        setMovieInfo(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovie(movieId);\n  }, [movieId, endpoint]);\n\n  return { movieInfo, isLoading, error };\n}\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Button = styled.button`\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  font-weight: 500;\n  color: white;\n  background-color: orangered;\n  border: none;\n  margin-left: 8px;\n  cursor: pointer;\n  width: 100px;\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n\nexport const Wrap = styled.div`\n  display: flex;\n  gap: 24px;\n  max-width: 1024px;\n  margin: 0 auto;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 24px;\n  max-width: 1024px;\n  margin: 0 auto;\n`;\n\nexport const Img = styled.img`\n  max-width: 300px;\n`;\n\nexport const LinkBtn = styled(Link)`\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  font-weight: 500;\n  color: white;\n  background-color: orangered;\n  border: none;\n  margin-left: 8px;\n  cursor: pointer;\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n","import { useLocation, useNavigate } from 'react-router-dom';\nimport { Box } from '../Box/Box.styled';\nimport { Button, Wrap, Img, LinkBtn, List } from './Movie.styled';\nimport PropTypes from 'prop-types';\n\nexport const Movie = ({ movie }) => {\n  const { title, release_date, overview, poster_path, vote_average, genres } =\n    movie;\n  const location = useLocation();\n  const navigation = useNavigate();\n  const onBtnClick = () => {\n    navigation(location?.state?.from ?? '/');\n  };\n\n  return (\n    <Box>\n      <Button type=\"button\" onClick={onBtnClick}>\n        Go back\n      </Button>\n      <Wrap>\n        <Img\n          src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n          alt={title}\n        />\n        <div>\n          <h2>\n            {title} ({new Date(release_date).getFullYear()})\n          </h2>\n          <p>User score: {Math.round(vote_average * 10)} %</p>\n          <h3>Genres</h3>\n          <p>{genres.map(({ name }) => name).join(', ')}</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n        </div>\n      </Wrap>\n      <h2>Additional information</h2>\n      <List>\n        <li>\n          <LinkBtn to=\"cast\" state={location.state}>\n            Cast\n          </LinkBtn>\n        </li>\n        <li>\n          <LinkBtn to=\"reviews\" state={location.state}>\n            Reviews\n          </LinkBtn>\n        </li>\n      </List>\n    </Box>\n  );\n};\n\nMovie.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n    poster_path: PropTypes.string,\n    vote_average: PropTypes.number.isRequired,\n    genres: PropTypes.array.isRequired,\n  }).isRequired,\n};\n","import { Outlet } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport useFetchMovieInfo from 'hooks/useFetchMovieInfo';\nimport { Movie } from 'components/Movie/Movie';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MoviesDetails = () => {\n  const { movieInfo, isLoading, error } = useFetchMovieInfo();\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {movieInfo && <Movie movie={movieInfo} />}\n      {error && <p>Ooops!</p>}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MoviesDetails;\n"],"names":["axios","KEY","fetchTrendingMovies","params","api_key","data","results","map","id","title","url","poster_path","fetchMoviesByQuery","query","fetchMovieById","movieId","endpoint","response","useFetchMovieInfo","useState","movieInfo","setMovieInfo","isLoading","setIsLoading","error","setError","useParams","useEffect","getMovie","movieDetails","message","Button","styled","Wrap","List","Img","LinkBtn","Link","Movie","movie","release_date","overview","vote_average","genres","location","useLocation","navigation","useNavigate","type","onClick","state","from","src","alt","Date","getFullYear","Math","round","name","join","to","Loader","Suspense","fallback"],"sourceRoot":""}