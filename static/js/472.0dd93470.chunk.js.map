{"version":3,"file":"static/js/472.0dd93470.chunk.js","mappings":"+PAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAECC,EAAmB,mCAAG,uGACVF,EAAAA,EAAAA,GAAM,sBAAuB,CAClDG,OAAQ,CAAEC,QAASH,KAFY,uBACzBI,EADyB,EACzBA,KADyB,kBAI1BA,EAAKC,QAAQC,KAAI,kBAAiC,CAAEC,GAAnC,EAAGA,GAAoCC,MAAvC,EAAOA,MAAuCC,IAA9C,EAAcC,YAAd,KAJS,2CAAH,qDAOnBC,EAAkB,mCAAG,WAAMC,GAAN,0FACTb,EAAAA,EAAAA,GAAM,eAAgB,CAC3CG,OAAQ,CAAEC,QAASH,EAAKY,MAAAA,KAFM,uBACxBR,EADwB,EACxBA,KADwB,kBAIzBA,EAAKC,QAAQC,KAAI,kBAAiC,CAAEC,GAAnC,EAAGA,GAAoCC,MAAvC,EAAOA,MAAuCC,IAA9C,EAAcC,YAAd,KAJQ,2CAAH,sDAOlBG,EAAc,mCAAG,WAAOC,EAASC,GAAhB,wFACLhB,EAAAA,EAAAA,GAAM,SAAD,OAAUe,GAAV,OAAoBC,GAAY,CAC1Db,OAAQ,CAAEC,QAASH,KAFO,cACtBgB,EADsB,yBAKrBA,EAASZ,MALY,2CAAH,uD,yHCfZ,SAASa,IAAmC,IAAhBF,EAAe,uDAAJ,GACpD,GAAkCG,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAoBC,EAAAA,EAAAA,MAAZX,EAAR,EAAQA,QAkBR,OAhBAY,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,WAAMb,GAAN,8EACfQ,GAAa,GADE,mBAGcT,EAAAA,EAAAA,IAAeC,EAASC,GAHtC,OAGPa,EAHO,OAIbR,EAAaQ,GAJA,gDAMbJ,EAAS,KAAMK,SANF,yBAQbP,GAAa,GARA,4EAAH,sDAYdK,EAASb,EACV,GAAE,CAACA,EAASC,IAEN,CAAEI,UAAAA,EAAWE,UAAAA,EAAWE,MAAAA,EAChC,C,yFCxBYO,EAAa,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC3B,OACE,yBACGA,EAAK1B,QAAQ2B,OAAS,GACrB,wBACGD,EAAK1B,QAAQC,KAAI,gBAAGC,EAAH,EAAGA,GAAI0B,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAChB,2BACE,0BAAI,WAASD,MACb,yBAAG,cAAYC,OAFR3B,EADO,OAQpB,uBAAG,8CAIV,E,SCLD,EAXgB,WACd,OAAwCU,EAAAA,EAAAA,GAAkB,YAAlDE,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,UAAWE,EAA9B,EAA8BA,MAC9B,OACE,gCACGF,IAAa,SAACc,EAAA,EAAD,IACbZ,IAAS,uBAAG,6CACZJ,IAAa,SAACW,EAAD,CAAYC,KAAMZ,MAGrC,C","sources":["fetchAPI/fetchAPI.js","hooks/useFetchMovieInfo.js","components/ReviewList/ReviewList.jsx","pages/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = 'd3bfd9e3078e7fbc5691e64e118089ee';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios('trending/movie/week', {\n    params: { api_key: KEY },\n  });\n  return data.results.map(({ id, title, poster_path }) => ({ id, title, url: poster_path }));\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const { data } = await axios('search/movie', {\n    params: { api_key: KEY, query },\n  });\n  return data.results.map(({ id, title, poster_path }) => ({ id, title, url: poster_path }));\n};\n\nexport const fetchMovieById = async (movieId, endpoint) => {\n  const response = await axios(`movie/${movieId}${endpoint}`, {\n    params: { api_key: KEY },\n  });\n\n  return response.data;\n};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieById } from 'fetchAPI/fetchAPI';\n\nexport default function useFetchMovieInfo (endpoint = '') {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovie = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieDetails = await fetchMovieById(movieId, endpoint);\n        setMovieInfo(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovie(movieId);\n  }, [movieId, endpoint]);\n\n  return { movieInfo, isLoading, error };\n};","// import PropTypes from 'prop-types';\n// import { MainContainer } from 'utils/GlobalStyle';\n\nexport const ReviewList = ({ info }) => {\n  return (\n    <div>\n      {info.results.length > 0 ? (\n        <ul>\n          {info.results.map(({ id, author, content }) => (\n            <li key={id}>\n              <h4>Author: {author}</h4>\n              <p>Character: {content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </div>\n  );\n};\n\n// ReviewList.propTypes = {\n//   info: PropTypes.shape({\n//     results: PropTypes.arrayOf(\n//       PropTypes.shape({\n//         id: PropTypes.string.isRequired,\n//         author: PropTypes.string.isRequired,\n//         content: PropTypes.string.isRequired,\n//       })\n//     ).isRequired,\n//   }).isRequired,\n// };","import { Loader } from 'components/Loader/Loader';\nimport { ReviewList } from 'components/ReviewList/ReviewList';\nimport useFetchMovieInfo from 'hooks/useFetchMovieInfo';\n\nconst Reviews = () => {\n  const { movieInfo, isLoading, error } = useFetchMovieInfo('/reviews');\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>We don't have any reviews for this movie</p>}\n      {movieInfo && <ReviewList info={movieInfo} />}\n    </>\n  );\n};\n\nexport default Reviews;"],"names":["axios","KEY","fetchTrendingMovies","params","api_key","data","results","map","id","title","url","poster_path","fetchMoviesByQuery","query","fetchMovieById","movieId","endpoint","response","useFetchMovieInfo","useState","movieInfo","setMovieInfo","isLoading","setIsLoading","error","setError","useParams","useEffect","getMovie","movieDetails","message","ReviewList","info","length","author","content","Loader"],"sourceRoot":""}