{"version":3,"file":"static/js/811.4eb5833b.chunk.js","mappings":"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","sources":["fetchAPI/fetchAPI.js","hooks/useFetchMovieInfo.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","components/Box/Box.styled.js","components/CastList/CastList.styled.js","components/CastList/CastList.jsx","pages/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = 'd3bfd9e3078e7fbc5691e64e118089ee';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios('trending/movie/week', {\n    params: { api_key: KEY },\n  });\n  return data.results.map(({ id, title, poster_path }) => ({ id, title, url: poster_path }));\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const { data } = await axios('search/movie', {\n    params: { api_key: KEY, query },\n  });\n  return data.results.map(({ id, title, poster_path }) => ({ id, title, url: poster_path }));\n};\n\nexport const fetchMovieById = async (movieId, endpoint) => {\n  const response = await axios(`movie/${movieId}${endpoint}`, {\n    params: { api_key: KEY },\n  });\n\n  return response.data;\n};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieById } from 'fetchAPI/fetchAPI';\n\nexport default function useFetchMovieInfo (endpoint = '') {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovie = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieDetails = await fetchMovieById(movieId, endpoint);\n        setMovieInfo(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovie(movieId);\n  }, [movieId, endpoint]);\n\n  return { movieInfo, isLoading, error };\n};","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 16px;\n  padding-bottom: 24px;\n`;","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport const Item = styled.li`\n  width: calc((100% - 30px) / 4);\n  display: flex;\n  align-items: center;\n\n  gap: 5px;\n  font-size: 12px;\n`;\n\nexport const Wrapper = styled.div`\n  flex-shrink: 0;\n  width: 80px;\n  height: 100px;\n  overflow: hidden;\n`;\n\nexport const Avatar = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;","// import PropTypes from 'prop-types';\nimport { Box } from '../Box/Box.styled';\nimport { List, Item, Wrapper, Avatar } from './CastList.styled';\n\nexport const CastList = ({ info }) => {\n  const noPhoto =\n    'https://planeta-agro.com.ua/cloud-cgi/static/uaprom-static/image/new_design/images/no_image-hce614324446b22b42a09b69093e309fce.png';\n  return (\n    <Box>\n      {info.cast.length > 0 ? (\n        <List>\n          {info.cast.map(({ id, name, profile_path, character }) => (\n            <Item key={id}>\n              <Wrapper>\n                <Avatar\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                      : `${noPhoto}`\n                  }\n                  alt={name}\n                />\n              </Wrapper>\n              <div>\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </div>\n            </Item>\n          ))}\n        </List>\n      ) : (\n        <p>We have no more details</p>\n      )}\n    </Box>\n  );\n};\n\n// CastList.propTypes = {\n//   info: PropTypes.shape({\n//     cast: PropTypes.arrayOf(\n//       PropTypes.shape({\n//         id: PropTypes.number.isRequired,\n//         name: PropTypes.string.isRequired,\n//         profile_path: PropTypes.string,\n//         character: PropTypes.string.isRequired,\n//       })\n//     ).isRequired,\n//   }).isRequired,\n// };","import { Loader } from 'components/Loader/Loader';\nimport useFetchMovieInfo from 'hooks/useFetchMovieInfo';\nimport { CastList } from 'components/CastList/CastList';\n\nconst Cast = () => {\n  const { movieInfo, isLoading, error } = useFetchMovieInfo('/credits');\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>We have no more details</p>}\n      {movieInfo && <CastList info={movieInfo} />}\n    </>\n  );\n};\n\nexport default Cast;"],"names":["axios","KEY","fetchTrendingMovies","params","api_key","data","results","map","id","title","url","poster_path","fetchMoviesByQuery","query","fetchMovieById","movieId","endpoint","response","useFetchMovieInfo","useState","movieInfo","setMovieInfo","isLoading","setIsLoading","error","setError","useParams","useEffect","getMovie","movieDetails","message","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","Box","styled","List","Item","Wrapper","Avatar","CastList","info","cast","length","name","profile_path","character","src","alt","Loader"],"sourceRoot":""}